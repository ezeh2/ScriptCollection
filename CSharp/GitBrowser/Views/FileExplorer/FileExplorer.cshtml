@model FileExplorerViewModel

@{
    ViewData["Title"] = "File Explorer - " + (Model.CurrentPath ?? "Root");
}

<h1>File Explorer</h1>
<p><strong>Current Path:</strong> @Model.CurrentPath</p>

@if (!string.IsNullOrEmpty(Model.ErrorMessage))
{
    <p style="color: red;"><strong>Error:</strong> @Model.ErrorMessage</p>
}

<div class="file-explorer-container">
    <div class="left-pane">
        <h3>Folders</h3>
        @if (Model.ParentPath != null)
        {
            <div class="pane-item">
                <a href="@Url.Action("Index", "FileExplorer", new { path = Model.ParentPath })">
                    <span class="pane-icon">‚¨ÜÔ∏è</span> Parent Directory
                </a>
            </div>
        }
        else
        {
            <div class="pane-item">
                <span class="pane-icon">‚¨ÜÔ∏è</span> Parent Directory (Root)
            </div>
        }

        @if (Model.DirectoryEntries != null && Model.DirectoryEntries.Any())
        {
            foreach (var dirEntry in Model.DirectoryEntries)
            {
                <div class="pane-item">
                    <span class="pane-icon">üìÅ</span>
                    <a href="@Url.Action("Index", "FileExplorer", new { path = dirEntry.FullPath })">@dirEntry.Name</a>
                </div>
            }
        }
        else
        {
            // Refined logic for "No sub-directories" using Model.ParentPath
            if (!(Model.ParentPath == null && (Model.CurrentPath == "/" || string.IsNullOrEmpty(Model.CurrentPath))))
            {
                 <p><em>No sub-directories.</em></p>
            }
            // This second condition might need further review for its logic with Model.ParentPath
            else if (Model.DirectoryEntries != null && !Model.DirectoryEntries.Any() && (Model.ParentPath != null || (Model.CurrentPath != "/" && !string.IsNullOrEmpty(Model.CurrentPath) ) ) )
            {
                 // Handles case where it's not root, parent exists, but still no directories
                 <p><em>No sub-directories.</em></p>
            }
        }
    </div>

    <div class="right-pane">
        <h3>Files in @(Model.CurrentPath ?? "current directory")</h3>
        @if (Model.FileEntries != null && Model.FileEntries.Any())
        {
            foreach (var fileEntry in Model.FileEntries)
            {
                <div class="pane-item">
                    <span class="pane-icon">üìÑ</span>
                    <span>@fileEntry.Name</span>
                </div>
            }
        }
        else
        {
            <p><em>No files in this directory.</em></p>
        }
    </div>
</div>

<style>
    .file-explorer-container {
        display: flex;
        width: 100%;
        margin-top: 10px;
    }
    .left-pane {
        flex: 1;
        padding-right: 15px;
        margin-right: 15px;
        border-right: 1px solid #ccc;
        min-height: 200px;
    }
    .right-pane {
        flex: 2;
        min-height: 200px;
    }
    .pane-item {
        margin-bottom: 8px;
        display: flex;
        align-items: center;
    }
    .pane-icon {
        margin-right: 8px;
    }
    h3 {
        margin-top: 0;
    }
</style>
