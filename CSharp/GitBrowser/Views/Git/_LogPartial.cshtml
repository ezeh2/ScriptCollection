@model List<GitCommit>

<h4>@ViewBag.RepoName - @ViewBag.BranchName</h4>
<h2>Commits</h2>
<div class="logentries">
    <div class="logentry logentry__header">
        <div class="logentry__commitId">Commit Id</div>
        <div>AuthorDate</div>    
        <div>Author</div>
        <div>CommitterDate</div>    
        <div>Committer</div>        
        <div class="logentry__message">Message</div>
        <div>Decorations</div>
        <div>Notes</div>
    </div>
@foreach (var commit in Model)
{
    <div class="logentry">
        <div class="logentry__commitId">@Html.Encode(commit.Sha.Substring(0, 7))</div>
        <div>@Html.Encode(commit.AuthorDate)</div>    
        <div>@Html.Encode(commit.Author)</div>
        <div>@Html.Encode(commit.CommitterDate)</div>    
        <div>@Html.Encode(commit.Committer)</div>        
        <div class="logentry__message">@Html.Encode(commit.Message)</div>
        <div class="logentry__decorations">
            @if (commit.Decorations != null && commit.Decorations.Any())
            {
                @Html.Encode(string.Join(", ", commit.Decorations))
            }
        </div>
        <div class="logentry__notes">
            @if (commit.Notes != null && commit.Notes.Any())
            {
                // Using <br /> for notes, so need Raw to render the <br /> tag.
                // Individual notes are already encoded by the service if needed,
                // but let's assume they are plain text and encode them here for safety.
                // However, the primary goal is to render <br />.
                // A safer approach would be to loop and @Html.Encode each note, then add <br />.
                // For now, sticking to join with <br /> and relying on prior encoding or trusting note content.
                // Let's refine this: iterate and encode.
                foreach (var note in commit.Notes)
                {
                    @Html.Encode(note) <br />
                }
            }
        </div>
    </div>
}
</div>
